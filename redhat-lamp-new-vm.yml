---
- hosts: all
  connection: ssh
  gather_facts: yes
  vars:
    ssh_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  tasks:
    - name: Generate a random 4-character string for webserver vm suffix
      set_fact:
        webserver_suffix: "{{ lookup('password', '/dev/null length=4 chars=ascii_letters,digits') }}"

    # Create VM
    - name: Clone a virtual machine from Linux template and customize
      vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ vcenter_datacenter }}"
        state: present
        folder: /Demo
        template: "{{ vm_template }}"
        name: "{{ vm_name }}-{{ webserver_suffix }}"
        cluster: "{{ vcenter_cluster }}"
        networks:
          - name: VM Network
            ip: "{{ vm_ip_addr_webserver }}"
            netmask: 255.255.255.0
            gateway: "{{ vm_gateway }}"
        wait_for_ip_address: True
        customization:
          domain: "{{ vm_guest_domain }}"
          dns_servers:
            - "{{ vcenter_cluster_dns_server_one }}"
            - "{{ vcenter_cluster_dns_server_two }}"
          dns_suffix:
            - "{{ vm_dns_suffix }}"
      register: deploy_vm

    - name: Print details of new vm
      debug:
        var: deploy_vm

    - ansible.builtin.add_host:
        name: "{{ vm_ip_addr_webserver }}"
        groups: webservers
      changed_when: false

- name: Install LAMP Stack on new VM
  hosts: webservers
  gather_facts: yes
  vars:
    ansible_user: "{{ webserver_template_user }}"
    ansible_ssh_pass: "{{ webserver_template_password }}"
  tasks:
    - name: Install EPEL Repo
      dnf:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
        state: present
        disable_gpg_check: yes

    - name: Install dependencies
      dnf:
        name:
          - httpd
          - "@mysql"
          - python3-mysql
          - php
          - php-mysqlnd
          - php-cli
        state: present

    - name: Enable and start Apache service
      systemd:
        name: httpd
        enabled: yes
        state: started

    - name: Enable and start MySQL service
      systemd:
        name: mysqld
        enabled: yes
        state: started

    # At this point you could clone a repo and prep the app
    # For this demo create the app here
    - name: Create a new database for the counter
      mysql_db:
        name: counter_db
        state: present
        login_unix_socket: /var/lib/mysql/mysql.sock

    - name: Create a table for the counter
      mysql_query:
        login_unix_socket: /var/lib/mysql/mysql.sock
        login_db: counter_db
        query: |
          CREATE TABLE IF NOT EXISTS counter_table (
            id INT AUTO_INCREMENT PRIMARY KEY,
            count_value INT NOT NULL DEFAULT 0
          );
          INSERT INTO counter_table (count_value) VALUES (0);

    - name: Create styled message index.php with buttons
      copy:
        content: |
          <?php
            $mysqli = new mysqli("localhost", "root", "", "counter_db");
            if ($mysqli->connect_error) {
                die("Connection failed: " . $mysqli->connect_error);
            }

            if ($_SERVER['REQUEST_METHOD'] == 'POST') {
                if (isset($_POST['increment'])) {
                    $mysqli->query("UPDATE counter_table SET count_value = count_value + 1 WHERE id = 1");
                } elseif (isset($_POST['decrement'])) {
                    $mysqli->query("UPDATE counter_table SET count_value = count_value - 1 WHERE id = 1");
                }
            }

            $result = $mysqli->query("SELECT count_value FROM counter_table WHERE id = 1");
            $counter = $result->fetch_assoc()['count_value'];
            $mysqli->close();
          ?>

          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title><?php echo '{{ webserver_message }}'; ?></title>
              <style>
                  body {
                      font-size: 72px;
                      display: flex;
                      flex-direction: column;
                      justify-content: center;
                      align-items: center;
                      height: 100vh;
                  }
              </style>
          </head>
          <body>
              <?php echo '{{ webserver_message }}'; ?>
              <div><?php echo $counter; ?></div>
              <form action="" method="post">
                  <button type="submit" name="increment">Increment</button>
                  <button type="submit" name="decrement">Decrement</button>
              </form>
          </body>
          </html>
        dest: /var/www/html/index.php

    - name: Update DirectoryIndex to prioritise index.php
      ansible.builtin.lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: "^DirectoryIndex"
        line: "    DirectoryIndex index.php index.html"

    - name: Restart Apache
      service:
        name: httpd
        state: restarted

    # The template has firewalld running so open port 80
    - name: Open port 80/tcp in the public zone
      firewalld:
        zone: public
        service: http
        permanent: yes
        state: enabled

    - name: Reload firewalld to apply changes
      command: firewall-cmd --reload
